/**
 * Next.js API route –¥–ª—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ 1inch Fusion API
 * –û–±—Ö–æ–¥–∏—Ç CORS –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 */

import { NextApiRequest, NextApiResponse } from 'next';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  // –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö origins –≤ development
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º preflight –∑–∞–ø—Ä–æ—Å—ã
  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  try {
    const { method, url, body, headers } = req;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∏–∑ URL
    const apiPath = url?.replace('/api/1inch-fusion/', '') || '';
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è 1inch API —Å API –∫–ª—é—á–æ–º –≤ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
    const apiKey = process.env.NEXT_PUBLIC_ONEINCH_API_KEY;
    const separator = apiPath.includes('?') ? '&' : '?';
    const targetUrl = `https://api.1inch.dev/fusion/${apiPath}${separator}apikey=${apiKey}`;
    
    console.log('üîÑ Proxying request to:', targetUrl);
    console.log('üìù Method:', method);
    console.log('üìù Body:', body);
    console.log('üìù Headers from client:', headers);
    console.log('üîë API Key present:', !!process.env.NEXT_PUBLIC_ONEINCH_API_KEY);
    console.log('üîë API Key length:', process.env.NEXT_PUBLIC_ONEINCH_API_KEY?.length || 0);

    // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ 1inch API
    const response = await fetch(targetUrl, {
      method: method || 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.NEXT_PUBLIC_ONEINCH_API_KEY}`,
        'X-API-Key': process.env.NEXT_PUBLIC_ONEINCH_API_KEY || '',
        'apikey': process.env.NEXT_PUBLIC_ONEINCH_API_KEY || '', // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        ...headers,
      },
      body: body ? JSON.stringify(body) : undefined,
    });

    if (!response.ok) {
      console.error('‚ùå 1inch API error:', response.status, response.statusText);
      return res.status(response.status).json({
        error: '1inch API error',
        status: response.status,
        statusText: response.statusText,
      });
    }

    const data = await response.json();
    console.log('‚úÖ 1inch API response:', data);

    res.status(200).json(data);
  } catch (error) {
    console.error('‚ùå Proxy error:', error);
    res.status(500).json({
      error: 'Proxy error',
      message: error instanceof Error ? error.message : 'Unknown error',
    });
  }
}
