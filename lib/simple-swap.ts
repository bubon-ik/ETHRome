/**
 * Simple Swap Service - –±–µ–∑ Fusion SDK
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—ã—á–Ω—ã–π 1inch API + wagmi sendCalls –¥–ª—è batch —Å–≤–∞–ø–æ–≤
 * 
 * @see https://wagmi.sh/core/api/actions/sendCalls
 */

import { SwapQuote, Token } from '@/types';
import { parseUnits, encodeFunctionData, erc20Abi, type Address } from 'viem';

const ONEINCH_API_URL = '/api/1inch';
const BASE_CHAIN_ID = 8453; // Base mainnet
const ONEINCH_ROUTER = '0x1111111254EEB25477B68fb85Ed929f73A960582'; // 1inch router –Ω–∞ Base

// ETH address constants
const ETH_ADDRESS = '0x0000000000000000000000000000000000000000';
const ETH_ADDRESS_1INCH = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee';

export interface SwapParams {
  fromToken: Token;
  toToken: Token;
  amount: string;
  walletAddress: string;
  slippage?: number;
  permit?: string; // Permit –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≥–∞–∑–∞
}

export interface SwapTransaction {
  to: Address;
  data: `0x${string}`;
  value: bigint;
  gas?: string;
  gasPrice?: string;
}

export interface BatchSwapCall {
  to: Address;
  data: `0x${string}`;
  value: bigint;
}

export class SimpleSwapService {
  private apiKey: string;
  private isDemoMode: boolean;

  constructor(apiKey: string = process.env.NEXT_PUBLIC_ONEINCH_API_KEY || '') {
    this.apiKey = apiKey;
    this.isDemoMode = !apiKey || apiKey === 'your_1inch_api_key';
    
    console.log('üîë SimpleSwapService initialized:');
    console.log('  API Key:', apiKey ? `${apiKey.substring(0, 8)}...` : 'NOT SET');
    console.log('  Demo Mode:', this.isDemoMode);
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è 1inch API
   */
  private normalizeTokenAddress(address: string): string {
    if (address.toLowerCase() === ETH_ADDRESS.toLowerCase()) {
      return ETH_ADDRESS_1INCH;
    }
    return address;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è —Å–≤–∞–ø–∞
   */
  async getQuote(params: SwapParams): Promise<SwapQuote> {
    if (this.isDemoMode) {
      return this.getDemoQuote(params);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    if (typeof window === 'undefined') {
      console.log('üåê SSR mode, using demo quote');
      return this.getDemoQuote(params);
    }

    try {
      const url = new URL(`${ONEINCH_API_URL}/swap/v5.0/${BASE_CHAIN_ID}/quote`, window.location.origin);
      url.searchParams.append('src', this.normalizeTokenAddress(params.fromToken.address));
      url.searchParams.append('dst', this.normalizeTokenAddress(params.toToken.address));
      url.searchParams.append('amount', parseUnits(params.amount, params.fromToken.decimals).toString());

      console.log('üîç Getting quote from:', url.toString());

      const response = await fetch(url.toString(), {
        method: 'GET',
        headers: {
          'accept': 'application/json',
        },
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå API Error:', response.status, errorText);
        throw new Error(`1inch API error: ${response.status} - ${errorText}`);
      }

      const data = await response.json();
      console.log('‚úÖ Quote received:', data);
      
      // 1inch API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
      return {
        fromToken: {
          address: params.fromToken.address,
          symbol: data.fromToken?.symbol || params.fromToken.symbol,
          name: data.fromToken?.name || params.fromToken.name,
          decimals: data.fromToken?.decimals || params.fromToken.decimals,
          chainId: BASE_CHAIN_ID,
        },
        toToken: {
          address: params.toToken.address,
          symbol: data.toToken?.symbol || params.toToken.symbol,
          name: data.toToken?.name || params.toToken.name,
          decimals: data.toToken?.decimals || params.toToken.decimals,
          chainId: BASE_CHAIN_ID,
        },
        fromAmount: data.fromTokenAmount || params.amount,
        toAmount: data.toTokenAmount || '0',
        gas: data.estimatedGas || '150000',
        gasPrice: '2000000000',
        protocols: data.protocols || [],
      };
    } catch (error) {
      console.error('Failed to get quote:', error);
      return this.getDemoQuote(params);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Å–≤–∞–ø–∞
   */
  async getSwapTransaction(params: SwapParams & { slippage?: number }): Promise<SwapTransaction> {
    if (this.isDemoMode) {
      return this.getDemoSwapTransaction(params);
    }

    try {
      const url = new URL(`${ONEINCH_API_URL}/swap/v5.0/${BASE_CHAIN_ID}/swap`, window.location.origin);
      url.searchParams.append('src', this.normalizeTokenAddress(params.fromToken.address));
      url.searchParams.append('dst', this.normalizeTokenAddress(params.toToken.address));
      url.searchParams.append('amount', parseUnits(params.amount, params.fromToken.decimals).toString());
      url.searchParams.append('from', params.walletAddress);
      url.searchParams.append('slippage', (params.slippage || 1).toString());
      
      // –î–æ–±–∞–≤–ª—è–µ–º permit –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (params.permit) {
        url.searchParams.append('permit', params.permit);
        console.log('üîê Using permit data for gas optimization');
      }

      const response = await fetch(url.toString(), {
        method: 'GET',
        headers: {
          'accept': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`1inch API error: ${response.status}`);
      }

      const data = await response.json();
      
      return {
        to: data.tx.to as Address,
        data: data.tx.data as `0x${string}`,
        value: BigInt(data.tx.value || '0'),
        gas: data.tx.gas,
        gasPrice: data.tx.gasPrice,
      };
    } catch (error) {
      console.error('Failed to get swap transaction:', error);
      return this.getDemoSwapTransaction(params);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è approve —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   */
  async getApproveTransaction(
    tokenAddress: string, 
    amount: string,
    decimals: number = 18
  ): Promise<SwapTransaction> {
    if (this.isDemoMode) {
      return this.getDemoApproveTransaction(tokenAddress, amount);
    }

    try {
      const url = new URL(`${ONEINCH_API_URL}/swap/v5.2/${BASE_CHAIN_ID}/approve/transaction`, window.location.origin);
      url.searchParams.append('tokenAddress', tokenAddress);
      url.searchParams.append('amount', parseUnits(amount, decimals).toString());

      const response = await fetch(url.toString(), {
        method: 'GET',
        headers: {
          'accept': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`1inch API error: ${response.status}`);
      }

      const data = await response.json();
      
      return {
        to: data.to as Address,
        data: data.data as `0x${string}`,
        value: BigInt(data.value || '0'),
        gas: data.gas,
        gasPrice: data.gasPrice,
      };
    } catch (error) {
      console.error('Failed to get approve transaction:', error);
      return this.getDemoApproveTransaction(tokenAddress, amount);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å allowance –¥–ª—è —Ç–æ–∫–µ–Ω–∞
   */
  async getAllowance(tokenAddress: string, walletAddress: string): Promise<string> {
    if (this.isDemoMode) {
      return '0'; // –í—Å–µ–≥–¥–∞ –Ω—É–∂–Ω–æ approve –≤ –¥–µ–º–æ
    }

    try {
      const spender = await this.getSpender();
      const url = new URL(`${ONEINCH_API_URL}/swap/v5.2/${BASE_CHAIN_ID}/approve/allowance`, window.location.origin);
      url.searchParams.append('tokenAddress', tokenAddress);
      url.searchParams.append('walletAddress', walletAddress);
      url.searchParams.append('spenderAddress', spender);

      const response = await fetch(url.toString());

      if (!response.ok) {
        throw new Error(`1inch API error: ${response.status}`);
      }

      const data = await response.json();
      return data.allowance;
    } catch (error) {
      console.error('Failed to get allowance:', error);
      return '0';
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å spender address
   */
  async getSpender(): Promise<string> {
    if (this.isDemoMode) {
      return ONEINCH_ROUTER;
    }

    try {
      const response = await fetch(`${window.location.origin}${ONEINCH_API_URL}/swap/v5.2/${BASE_CHAIN_ID}/approve/spender`);
      
      if (!response.ok) {
        throw new Error(`1inch API error: ${response.status}`);
      }

      const data = await response.json();
      return data.address;
    } catch (error) {
      console.error('Failed to get spender:', error);
      return ONEINCH_ROUTER;
    }
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å batch calls –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–≤–∞–ø–æ–≤
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
   */
  async prepareBatchSwapCalls(params: {
    swaps: SwapParams[];
    walletAddress: string;
    slippage?: number;
  }): Promise<BatchSwapCall[]> {
    const calls: BatchSwapCall[] = [];
    const tokenApprovals = new Map<string, bigint>(); // –¢–æ–∫–µ–Ω -> –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞

    // 1. –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ approve —Å—É–º–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    for (const swap of params.swaps) {
      if (!this.isNativeToken(swap.fromToken.address)) {
        const amount = parseUnits(swap.amount, swap.fromToken.decimals);
        const currentMax = tokenApprovals.get(swap.fromToken.address) || BigInt(0);
        
        if (amount > currentMax) {
          tokenApprovals.set(swap.fromToken.address, amount);
        }
      }
    }

    // 2. –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–∏–Ω approve –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
    for (const [tokenAddress, amount] of tokenApprovals) {
      const allowance = await this.getAllowance(tokenAddress, params.walletAddress);
      
      if (BigInt(allowance) < amount) {
        console.log(`üí∞ Adding approve for ${tokenAddress}: ${amount.toString()}`);
        
        const approveTx = await this.getApproveTransaction(
          tokenAddress,
          amount.toString(),
          18 // –ò—Å–ø–æ–ª—å–∑—É–µ–º 18 decimals –¥–ª—è approve
        );
        
        calls.push({
          to: approveTx.to,
          data: approveTx.data,
          value: approveTx.value,
        });
      }
    }

    // 3. –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ swap —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    for (const swap of params.swaps) {
      const swapTx = await this.getSwapTransaction({
        ...swap,
        walletAddress: params.walletAddress,
        slippage: params.slippage,
      });

      calls.push({
        to: swapTx.to,
        data: swapTx.data,
        value: swapTx.value,
      });
    }

    console.log(`üì¶ Prepared ${calls.length} calls: ${tokenApprovals.size} approves + ${params.swaps.length} swaps`);
    return calls;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–∫–µ–Ω –Ω–∞—Ç–∏–≤–Ω—ã–º (ETH)
   */
  private isNativeToken(address: string): boolean {
    return address.toLowerCase() === ETH_ADDRESS.toLowerCase();
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å permit –¥–∞–Ω–Ω—ã–µ –¥–ª—è ERC-2612 —Ç–æ–∫–µ–Ω–æ–≤
   * –≠–∫–æ–Ω–æ–º–∏—Ç –≥–∞–∑ –∑–∞ —Å—á–µ—Ç –ø–æ–¥–ø–∏—Å–∏ –≤–º–µ—Å—Ç–æ approve —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   */
  private async generatePermitData(
    tokenAddress: string, 
    amount: string, 
    walletAddress: string
  ): Promise<string | undefined> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ —Ç–æ–∫–µ–Ω permit (ERC-2612)
      const spender = await this.getSpender();
      const amountInWei = parseUnits(amount, 18); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 18 decimals
      
      // –î–ª—è –¥–µ–º–æ —Ä–µ–∂–∏–º–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º undefined (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –æ–±—ã—á–Ω—ã–π approve)
      if (this.isDemoMode) {
        return undefined;
      }

      // –í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ permit
      // –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å–∏ —á–µ—Ä–µ–∑ wallet
      console.log('üîê Generating permit data for:', tokenAddress);
      console.log('   Amount:', amountInWei.toString());
      console.log('   Spender:', spender);
      
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é permit –ø–æ–¥–ø–∏—Å–∏
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º undefined –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±—ã—á–Ω–æ–≥–æ approve
      return undefined;
      
    } catch (error) {
      console.error('Failed to generate permit data:', error);
      return undefined;
    }
  }

  // ==================== DEMO MODE METHODS ====================

  private getDemoQuote(params: SwapParams): SwapQuote {
    const amountInWei = BigInt(parseUnits(params.amount, params.fromToken.decimals).toString());
    let toAmount: bigint;

    // –ü—Ä–æ—Å—Ç—ã–µ –∫—É—Ä—Å—ã –¥–ª—è –¥–µ–º–æ
    if (
      params.fromToken.address.toLowerCase() === ETH_ADDRESS.toLowerCase() &&
      params.toToken.address === '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913'
    ) {
      // ETH -> USDC: ~3000 USDC –∑–∞ 1 ETH
      toAmount = (amountInWei * BigInt(3000)) / BigInt(1e12);
    } else if (
      params.fromToken.address === '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913' &&
      params.toToken.address.toLowerCase() === ETH_ADDRESS.toLowerCase()
    ) {
      // USDC -> ETH: –æ–±—Ä–∞—Ç–Ω—ã–π –∫—É—Ä—Å
      toAmount = (amountInWei * BigInt(1e12)) / BigInt(3000);
    } else {
      // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã: 1:1 —Å –Ω–µ–±–æ–ª—å—à–æ–π –∫–æ–º–∏—Å—Å–∏–µ–π
      toAmount = (amountInWei * BigInt(98)) / BigInt(100); // 2% –∫–æ–º–∏—Å—Å–∏—è
    }

    return {
      fromToken: params.fromToken,
      toToken: params.toToken,
      fromAmount: params.amount,
      toAmount: toAmount.toString(),
      gas: '150000',
      gasPrice: '2000000000',
      protocols: [],
    };
  }

  private getDemoSwapTransaction(params: SwapParams): SwapTransaction {
    const amount = parseUnits(params.amount, params.fromToken.decimals);
    
    return {
      to: ONEINCH_ROUTER as Address,
      data: '0x12aa3caf' as `0x${string}`, // swap() selector placeholder
      value: this.isNativeToken(params.fromToken.address) ? amount : BigInt(0),
      gas: '150000',
      gasPrice: '2000000000',
    };
  }

  private getDemoApproveTransaction(tokenAddress: string, amount: string): SwapTransaction {
    const amountInWei = parseUnits(amount, 18);
    
    return {
      to: tokenAddress as Address,
      data: encodeFunctionData({
        abi: erc20Abi,
        functionName: 'approve',
        args: [ONEINCH_ROUTER as Address, amountInWei],
      }),
      value: BigInt(0),
      gas: '50000',
      gasPrice: '2000000000',
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö —Å–µ—Ä–≤–∏—Å–∞
   */
  getFeatures() {
    return {
      swaps: true,
      quotes: true,
      batchSwaps: true,
      demoMode: this.isDemoMode,
      hasApiKey: !!this.apiKey && this.apiKey !== 'your_1inch_api_key',
      network: 'Base',
      chainId: BASE_CHAIN_ID,
    };
  }
}

export const simpleSwapService = new SimpleSwapService();

